// Demo PScript program that implements a simple single-layer perceptron.

import std.io;
import std.random;

struct AIState {
    weights: list = [];
    bias: float = 0;
    learning_rate: float = 0.0;
};

struct Sample {
    // input vector for this sample
    input: list = [];
    // desired output for this sample.
    output: float = 0.0;
};

fn dot(x: list, y: list) -> float {
    if (x.size() != y.size()) {
        // TODO: add mechanism for error reporting in language?
        std.io.print("size for dot product does not match");
        return -999.0;
    }

    let result = 0.0;
    let n = x.size();
    for (let i = 0; i < n; i += 1) {
        result += x[i] * y[i];
    }
    return result;
}

fn list_size(x: list) -> int {
    return x.size();
}

fn ai_output(state: AIState, input: list) -> float {
    let unbiased = dot(state->weights, input);
    // apply bias to output
    return unbiased + state->bias;
}

fn sample_output(state: AIState, sample: Sample) -> float {
    return ai_output(state, sample->input);
}

fn init_state(in_vec_size: int, bias: float, learning_rate: float) -> AIState {
    let state = AIState {};
    state->bias = bias;
    state->learning_rate = learning_rate;
    let weights = state->weights;
    for (let i = 0; i < in_vec_size; i += 1) {
        // Could initialize weight to a random value in the future
        weights.append(0.0);
    }
    return state;
}

// This will create samples trying to make the perceptron classify points with y < 0 as 0, and y > 0 as 1.
fn obtain_training_samples() -> list {
    let inputs = [
         Sample{[0.72,0.82],-1.0},
         Sample{[0.91,-0.69],-1.0},
         Sample{[0.03,0.93],-1.0},
         Sample{[0.12,0.25],-1.0},
         Sample{[0.96,0.47],-1.0},
         Sample{[0.8,-0.75],-1.0},
         Sample{[0.46,0.98],-1.0},
         Sample{[0.66,0.24],-1.0},
         Sample{[0.72,-0.15],-1.0},
         Sample{[0.35,0.01],-1.0},
         Sample{[-0.11,0.1],1.0},
         Sample{[0.31,-0.96],1.0},
         Sample{[0.0,-0.26],1.0},
         Sample{[-0.43,-0.65],1.0},
         Sample{[0.57,-0.97],1.0},
         Sample{[-0.72,-0.64],1.0},
         Sample{[-0.25,-0.43],1.0},
         Sample{[-0.12,-0.9],1.0},
         Sample{[-0.58,0.62],1.0},
         Sample{[-0.77,-0.76],1.0}
    ];
    return inputs;
}

fn print_classification(state: AIState, input: list) -> void {
    let classification = ai_output(state, input);
    let fmt = "classifier for input = {}: {}";
    std.io.print(fmt.format(input, classification));
}

std.io.print("pscript sample program, simple single layer perceptron");

let training = obtain_training_samples();
let state = init_state(2, 1.0, 1.0);

let threshold = 0.0;

let max_iterations = 10;
let hits = 0;
let it = 0;
while(it < max_iterations && hits != training.size()) {
    hits = 0;

    for (let t = 0; t < training.size(); t += 1) {
        let sample = training[t];
        let inputs = sample->input;
        let output = sample_output(state, sample);
        let y = 0.0;

        if (output > threshold) {
            y = 1.0;
        } else {
            y = -1.0;
        }

        // update weights if output does not match expected output
        if (y == sample->output) {
            hits += 1;
        } else {
            let weights = state->weights;
            let n = weights.size();
            for (let j = 0; j < n; j += 1) {
                weights[j] = weights[j] + (state->learning_rate * sample->output * inputs[j]);
            }
            state->bias = state->bias + state->learning_rate * sample->output;
            let fmt = "Error - updating weight to {}";
            std.io.print(fmt.format(weights));
        }
    }

    let fmt = "Iteration {}: Correct: {} / {}";
    std.io.print(fmt.format(it, hits, training.size()));
    it += 1;
}

let fmt = "Training complete in {} iterations";
std.io.print(fmt.format(it));
std.io.print("Test classification results:");
